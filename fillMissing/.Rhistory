colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
write.csv(output.data, "arout.csv")
i = 1
j =6
pointList = data.frame(matrix(ncol = 5, nrow = 0))
colnames(pointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
output.data = data.frame(matrix(ncol = 5, nrow = 0))
curData = oneVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
companyName = companyNameVector[j]
coData = curData[j,]
coData = na.trim(coData)
numYears = length(coData)
companyName = companyNameVector[j]
coData = curData[j,]
(length(coData[is.na(coData)])<length(coData))
coData = na.trim(coData)
numYears = length(coData)
coData
(numYears > 14 & length(coData)== length(na.exclude(coData)))
coDataUse = coData[1:10] #use first 10 points for model
curPointList = data.frame(matrix(ncol = 5, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
curPointList$raw= coData
curPointList$industryName = industryName
curPointList$companyName = companyName
#run model
curMod = ar.ols(coDataUse, AIC = FALSE, order.max = 1, intercept = TRUE, demean = FALSE, na.action = na.exclude)
curMod$ar
#run AR models with 10 points and project up to 15===============================================================
pointList = data.frame(matrix(ncol = 5, nrow = 0))
colnames(pointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
output.data = data.frame(matrix(ncol = 4, nrow = 0))
colnames(output.data)= c("industryName", "companyName", "coeff1",  "intercept")
for (i in 1:length(oneVarList)){ #industry loop
curData = oneVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData))){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
curPointList = data.frame(matrix(ncol = 5, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
curPointList$raw= coData
curPointList$industryName = industryName
curPointList$companyName = companyName
#run model
curMod = ar.ols(coDataUse, AIC = FALSE, order.max = 1, intercept = TRUE, demean = FALSE, na.action = na.exclude)
if (is.na(curMod$ar[1])){
coeffs = c(NA, NA, NA)
}
else{
coeffs = curMod$ar[[1]]
int = curMod$x.intercept
coeffs = c(coeffs, int)
}
#do prediction here
preds = predict(curMod, newdata = coData[1:10],n.ahead = (numYears-10))
curPointList$arEst[11:numYears]= preds$pred
cur.outdata =data.frame(industry= industryName,company= companyName, coeff1 = coeffs[1], int = coeffs[3], stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data)
output.data= rbind(output.data, cur.outdata)
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
write.csv(output.data, "arout.csv")
write.csv(pointList, "pointList.csv")
i = 1
j = 6
curData = oneVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
companyName = companyNameVector[j]
coData = curData[j,]
coData = na.trim(coData)
numYears = length(coData)
coDataUse = coData[1:10] #use first 10 points for model
curPointList = data.frame(matrix(ncol = 5, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
curPointList$raw= coData
curPointList$industryName = industryName
curPointList$companyName = companyName
curMod = ar.ols(coDataUse, AIC = FALSE, order.max = 1, intercept = TRUE, demean = FALSE, na.action = na.exclude)
coeffs = curMod$ar[[1]]
int = curMod$x.intercept
coeffs = c(coeffs, int)
preds = predict(curMod, newdata = coData[1:10],n.ahead = (numYears-10))
curPointList$arEst[11:numYears]= preds$pred
BAll = "identity"
QAll= "diagonal and unequal" #note this could be changed if it causes problems since the unequal portion is irrelevant (it is a 1 by 1 matrix)
AAll = "equal" #company inputs are allowed to have trends
UAll = "equal"
RAll = "diagonal and equal"
ZAll = matrix(1,1,1)
output.data.ss = data.frame(matrix(ncol = 8, nrow = 0))
colnames(output.data.ss)= c("industryName", "companyName", "logLik", "numParams", "AICc", "States", "SEs", "converge")
control.list = list(safe = TRUE, trace =1, allow.degen= TRUE, maxit = 1000,conv.test.slope.tol=0.1)
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
model.current = MARSS(coDataUse, model = model.list, miss.value =NA, control = control.list)
(is.null(model.current$num.params))
numParams = model.current$num.params
AICc = model.current$AICc
stateVect = model.current$states[1,]
seVect = model.current$states.se[1,]
curStates = toString(model.current$states)
curSE = toString(model.current$states.se)
curConv = model.current$converge
sim.data=MARSSsimulate(model.current, nsim=1, tSteps=(numYears-10))
sim.data
sim.data$sim.data
sim.data$sim.data[1]
curPointList$ssEst[11:numYears] = sim.data$sim.data
BAll = "identity"
QAll= "diagonal and unequal" #note this could be changed if it causes problems since the unequal portion is irrelevant (it is a 1 by 1 matrix)
AAll = "equal" #company inputs are allowed to have trends
UAll = "equal"
RAll = "diagonal and equal"
ZAll = matrix(1,1,1)
pointList = data.frame(matrix(ncol = 5, nrow = 0))
colnames(pointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
output.data = data.frame(matrix(ncol = 4, nrow = 0))
colnames(output.data)= c("industryName", "companyName", "coeff1",  "intercept")
output.data.ss = data.frame(matrix(ncol = 8, nrow = 0))
colnames(output.data.ss)= c("industryName", "companyName", "logLik", "numParams", "AICc", "States", "SEs", "converge")
control.list = list(safe = TRUE, trace =1, allow.degen= TRUE, maxit = 1000,conv.test.slope.tol=0.1)
#run models with 10 points and project up to 15===============================================================
for (i in 1:length(oneVarList)){ #industry loop
curData = oneVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData))){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
curPointList = data.frame(matrix(ncol = 5, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
curPointList$raw= coData
curPointList$industryName = industryName
curPointList$companyName = companyName
#run model AR model
curMod = ar.ols(coDataUse, AIC = FALSE, order.max = 1, intercept = TRUE, demean = FALSE, na.action = na.exclude)
if (is.na(curMod$ar[1])){
coeffs = c(NA, NA, NA)
}
else{
coeffs = curMod$ar[[1]]
int = curMod$x.intercept
coeffs = c(coeffs, int)
}
#do prediction here
preds = predict(curMod, newdata = coData[1:10],n.ahead = (numYears-10))
curPointList$arEst[11:numYears]= preds$pred
#run state space model
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
model.current = MARSS(coDataUse, model = model.list, miss.value =NA, control = control.list)
#store output
if (is.null(model.current$num.params)){
print("failone")
numParams = NA
AICc = NA
curStates = NA
curSE = NA
curConv = NA
stateVect = rep(NA, numYears)
seVect = rep(NA, numYears)
} else{
numParams = model.current$num.params
AICc = model.current$AICc
stateVect = model.current$states[1,]
seVect = model.current$states.se[1,]
curStates = toString(model.current$states)
curSE = toString(model.current$states.se)
curConv = model.current$converge
#predict and store
sim.data=MARSSsimulate(model.current, nsim=1, tSteps=(numYears-10))
curPointList$ssEst[11:numYears] = sim.data$sim.data
}
if (is.null(model.current$logLik)){
logLik = NA
}else{
logLik = model.current$logLik
}
#write outputs
#ar
cur.outdata =data.frame(industry= industryName,company= companyName, coeff1 = coeffs[1], int = coeffs[2], stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data)
output.data= rbind(output.data, cur.outdata)
#ss
cur.outdata =data.frame(industry= industryName,company= companyName, logLik = logLik, numParams = numParams, AICc = AICc, states = curStates, ses = curSE, converge =curConv, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.ss)
output.data.ss= rbind(output.data.ss, cur.outdata)
#points
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
write.csv(output.data, "arout.csv")
write.csv(pointList, "pointList.csv")
write.csv(output.data.ss, "ssout.csv")
lenght(levels(as.factor(pointList$companyName)))
length(levels(as.factor(pointList$companyName)))
dim(pointList)
colnames(pointList)
successAR = pointList[!is.na(pointList$arEst),]
length(levels(as.factor(successAR$companyName)))
successSS = pointList[!is.na(pointList$ssEst),]
length(levels(as.factor(successSS$companyName)))
successCos = levels(as.factor(successSS$companyName))
pointListUse = pointList[pointList$companyName %in% successCos,]
dim(pointListUse)
length(levels(as.factor(pointListUse$companyName)))
pointListUse = pointListUse[!(is.na(pointListUse$arEst)),]
dim(pointListUse)
colnames(pointListUse)
MseAR = sum((pointListUse$arEst-pointListUse$raw)^2)
MseAR
MseSS = sum((pointListUse$ssEst-pointListUse$raw)^2)
MseSS = sum((pointListUse$ssEst-pointListUse$raw)^2)
MseSS
dim(pointListUse$arEst-pointListUse$raw)
length(pointListUse$arEst-pointListUse$raw)
length(pointListUse$ssEst-pointListUse$raw)
MseAR
MseSS
pointListUse$seAR = pointListUse$arEst-pointListUse$raw
pointListUse$seSS = pointListUse$ssEst-pointListUse$raw
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x
mseAR
colnames(mseAR)
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)
colnames(mseAR)
head(mseAR)
errors_dat = data.frame(companyName = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$gp,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseSS = aggregate(pointListUse$seSS, list(gp=pointListUse$companyName), sum)$x)
head(errors_dat)
pointListUse$seAR = pointListUse$arEst-pointListUse$raw
pointListUse$seSS = pointListUse$ssEst-pointListUse$raw
head(pointListUse)
errors_dat = data.frame(companyName = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$gp,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseSS = aggregate(pointListUse$seSS, list(gp=pointListUse$companyName), sum)$x)
head(errors_dat)
dim(errors_dat)
pointListUse$seAR = (pointListUse$arEst-pointListUse$raw)^2
pointListUse$seSS = (pointListUse$ssEst-pointListUse$raw)^2
errors_dat = data.frame(companyName = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$gp,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseSS = aggregate(pointListUse$seSS, list(gp=pointListUse$companyName), sum)$x)
head(errors_dat)
plot(data = errors_dat, x=mseAR, y = mseSS)
colnames(errors_dat)
plot(x=errors_dat$mseAR, y = errors_dat$mseSS)
max(mseAR)
max(errors_dat$mseAT)
max(errors_dat$mseAR)
write.csv(errors_dat, "errorout.csv")
errors_dat = errors_dat[errors_dat$company != 1585,]
plot(x=errors_dat$mseAR, y = errors_dat$mseSS)
errors_dat = errors_dat[errors_dat$company != "1585",]
dim(errors_dat)
plot(x=errors_dat$mseAR, y = errors_dat$mseSS)
errors_dat = data.frame(companyName = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$gp,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseSS = aggregate(pointListUse$seSS, list(gp=pointListUse$companyName), sum)$x)
errors_dat[errors_dat$companyName == 1585,]
errors_dat = errors_dat[errors_dat$companyName != 1585,]
plot(x=errors_dat$mseAR, y = errors_dat$mseSS)
pointList[pointList$companyName == 1585,]
errors_dat = errors_dat[!(errors_dat$companyName %in% c(1585,24922,11768,24473,25302,27747,29245,20245,27727),]
errors_dat = errors_dat[!(errors_dat$companyName %in% c(1585,24922,11768,24473,25302,27747,29245,20245,27727)),]
colnames(errors_dat)
mseAR = sum(errors_dat$mseAR)
mseSS = sum(errors_dat$mseSS)
mseAR
mseSS
17plot(errors_dat$mseAR, errors_dat$mseSS)
plot(errors_dat$mseAR, errors_dat$mseSS)
errors_dat = errors_dat[!(errors_dat$companyName %in% c(1585,24922,11768,24473,25302,27747,29245,20245,27727,23605,12227,12274,13794)),]
plot(errors_dat$mseAR, errors_dat$mseSS)
library(plyr)
library(ggplot2)
library(descr)
library(tseries)
library(gridExtra)
library(reshape2)
library(MARSS)
library(KFAS)
library(car)
library(mlogit)
library(nnet)
library(MASS)
#library(lme4)
#clear workspace ==============================================================
rm(list = ls())
#data i/o=======================================================================
RDDATA = read.csv("RDDATA.csv")
#note: input file has been slightly modified by STATA and has date year and industry/year ID extracted
CONCATID = read.csv("concat.csv")
RDDATA$iyID = CONCATID$iyID
RDDATA$datadate = as.Date(RDDATA$datadate, "%d%b%Y")
RDDATA$datayear = as.numeric(format(RDDATA$datadate, format = "%Y"))
RDDATA$npatappAdj = RDDATA$npatapp/RDDATA$sale
#create raw indexes=======================================================================
#pull raw R&D index and patent index
TEMP = RDDATA[,c("iyID", "xrdAdj")]
TEMP = na.exclude(TEMP)
TEMP = melt(TEMP, id = "iyID")
INDTABLE = dcast(TEMP, iyID~variable, mean)
INDTABLE2 = data.frame(freq(ordered(TEMP$iyID), plot=FALSE))
INDTABLE2 = INDTABLE2[1:(nrow(INDTABLE2)-1),]
INDTABLE2$iyID = rownames(INDTABLE2)
INDTABLE2= INDTABLE2[,c(1,4)]
INDTABLE = merge(x = INDTABLE, y = INDTABLE2, by = "iyID", all.x = TRUE)
colnames(INDTABLE)= c("iyID", "rawRD", "RDCount")
TEMP = RDDATA[,c("iyID", "npatappAdj")]
TEMP = na.exclude(TEMP)
TEMP = melt(TEMP, id = "iyID")
TEMP2 = dcast(TEMP, iyID~variable, mean)
TEMP3 = data.frame(freq(ordered(TEMP$iyID), plot=FALSE))
TEMP3 = TEMP3[1:(nrow(TEMP3)-1),]
TEMP3$iyID = rownames(TEMP3)
TEMP3= TEMP3[,c(1,4)]
INDTABLE = merge(x = INDTABLE, y = TEMP2, by = "iyID", all.x = TRUE)
INDTABLE = merge(x = INDTABLE, y = TEMP3, by = "iyID", all.x = TRUE)
colnames(INDTABLE)= c("iyID", "rawRD", "RDCount", "rawNumPat", "numPatCount")
#write.csv(INDTABLE,"C:/Users/Katharina/Documents/Umich/rdspend/rawindex.csv")
#create model inputs=======================================================================
#set up RD only data for model input
RDONLY = data.frame(gvkey = RDDATA$gvkey, xrdAdj = RDDATA$xrdAdj, datadate = RDDATA$datadate,sic = RDDATA$sic, datayear = RDDATA$datayear)
RDONLY = RDONLY[order(RDONLY$gvkey),]
NOMISS = na.exclude(RDONLY)
#create input lists by industry
indList = levels(factor(RDONLY$sic))
dataList = list()
nameVector = c()
for (i in 1:length(indList)){
curData = RDONLY[RDONLY$sic ==indList[i],]
#if (nrow(curData) > 50){
dataList[[length(dataList)+1]]= curData
nameVector[[length(nameVector)+1]]= indList[i]
#}
}
#clean inputs for each industry
oneVarList = list()
numCosList = list()
startYearList = list()
for (i in 1:length(nameVector)){
curData = dataList[[i]]
curDataOneVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$xrdAdj)) #take R&D spending as a percentage of sales
names(res) = sprintf("%s",df$gvkey)
res
}
)
startYearList[[i]]= min(curDataOneVar$datayear)
numCos = ncol(curDataOneVar)-1
model.data = curDataOneVar[-c(1)] #delete time entry
model.data = as.matrix(model.data)
model.data = t(model.data)
oneVarList[[i]]= model.data
numCosList[[i]] = numCos
}
#setup
pointList = data.frame(matrix(ncol = 4, nrow = 0))
colnames(pointList) = c("industryName","companyName", "raw", "meanEst")
output.data.mean = data.frame(matrix(ncol = 3, nrow = 0))
colnames(output.data.mean)= c("industryName", "companyName", "mean")
#model
for (i in 1:length(oneVarList)){ #industry loop
curData = oneVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData))){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
curPointList = data.frame(matrix(ncol = 5, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "raw", "arEst", "ssEst")
curPointList$raw= coData
curPointList$industryName = industryName
curPointList$companyName = companyName
#run mean model and predict
curMod = mean(coDataUse)
preds = rep(curMod, numYears-11)
curPointList$meanEst[11:numYears] = curMod
#write outputs
#mean model
cur.outdata =data.frame(industry= industryName,company= companyName, mean = curMod, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.mean)
output.data.mean= rbind(output.data.mean, cur.outdata)
#points
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
head(pointList)
pointList[1:20,]
write.csv(output.data.mead, "meanout.csv")
write.csv(pointList, "pointList2.csv")
write.csv(output.data.mean, "meanout.csv")
#setup
pointList = data.frame(matrix(ncol = 4, nrow = 0))
colnames(pointList) = c("industryName","companyName", "raw", "meanEst")
output.data.mean = data.frame(matrix(ncol = 3, nrow = 0))
colnames(output.data.mean)= c("industryName", "companyName", "mean")
#model
for (i in 1:length(oneVarList)){ #industry loop
curData = oneVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData))){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
curPointList = data.frame(matrix(ncol = 4, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "raw", "meanEst")
curPointList$raw= coData
curPointList$industryName = industryName
curPointList$companyName = companyName
#run mean model and predict
curMod = mean(coDataUse)
preds = rep(curMod, numYears-11)
curPointList$meanEst[11:numYears] = curMod
#write outputs
#mean model
cur.outdata =data.frame(industry= industryName,company= companyName, mean = curMod, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.mean)
output.data.mean= rbind(output.data.mean, cur.outdata)
#points
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
write.csv(output.data.mean, "meanout.csv")
write.csv(pointList, "pointList2.csv")
pointList = read.csv("inputs/compiledPointList.csv")
#overview of numbers of companies
length(levels(as.factor(pointList$companyName)))
successAR = pointList[!is.na(pointList$arEst),]
length(levels(as.factor(successAR$companyName)))
successSS = pointList[!is.na(pointList$ssEst),]
length(levels(as.factor(successSS$companyName)))
#select only companies where state space model runs
successCos = levels(as.factor(successSS$companyName))
pointListUse = pointList[pointList$companyName %in% successCos,]
pointListUse = pointListUse[!(is.na(pointListUse$arEst)),]
MseAR = sum((pointListUse$arEst-pointListUse$raw)^2)
MseSS = sum((pointListUse$ssEst-pointListUse$raw)^2)
MseMean = sum((pointListUse$ssEst-pointListUse$raw)^2)
MseAR
MseSS
MseMean
MseMean = sum((pointListUse$meanEst-pointListUse$raw)^2)
MseMean
pointListUse$seAR = (pointListUse$arEst-pointListUse$raw)^2
pointListUse$seSS = (pointListUse$ssEst-pointListUse$raw)^2
pointListUse$seMean = (pointListUse$meanEst-pointListUse$raw)^2
errors_dat = data.frame(companyName = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$gp,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseSS = aggregate(pointListUse$seSS, list(gp=pointListUse$companyName), sum)$x)
mseMean = aggregate(pointListUse$seMean, list(gp=pointListUse$companyName), sum)$x)
errors_dat = data.frame(companyName = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$gp,
mseAR = aggregate(pointListUse$seAR, list(gp=pointListUse$companyName), sum)$x,
mseSS = aggregate(pointListUse$seSS, list(gp=pointListUse$companyName), sum)$x,
mseMean = aggregate(pointListUse$seMean, list(gp=pointListUse$companyName), sum)$x)
write.csv(errors_dat, "errorout.csv")
errors_dat = errors_dat[!(errors_dat$companyName %in% c(1585,24922,11768,24473,25302,27747,29245,20245,27727,23605,12227,12274,13794)),]
mseAR = sum(errors_dat$mseAR)
mseSS = sum(errors_dat$mseSS)
mseMean = sum(errors_dat$mseMean)
mseAR
mseSS
mseMean
