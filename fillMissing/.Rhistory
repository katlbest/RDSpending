curPointList$revEst[11:numYears]= preds
}
}
}
}
}
}
i
j
(length(mydat$raw)>length(mydat[mydat$raw==0,]$raw))
mydat
pointList = data.frame(matrix(ncol = 7, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
revUse = coRev[1:10]
numUse = coNum[1:10]
curPointList = data.frame(matrix(ncol =7, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
curPointList$raw= coData
curPointList$rawRev= coRev
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$numPats = coNum
#run revenue prediction
curMod = NA
preds = NA
mydat = data.frame(rev=revUse, numPats = numUse, raw= coDataUse)
mydat = na.exclude(mydat)
if(nrow(mydat)>3){
if(length(mydat$raw)>length(mydat[mydat$raw==0,]$raw)){
curMod = lm(rev~numPats+raw, data = mydat)
preddat = data.frame(numPats = coNum[11:numYears], raw = coData[11:numYears])
preds = predict(curMod,preddat)
curPointList$revEst[11:numYears]= preds
}
}
}
}
}
}
pointList = data.frame(matrix(ncol = 7, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
revUse = coRev[1:10]
numUse = coNum[1:10]
curPointList = data.frame(matrix(ncol =7, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
curPointList$raw= coData
curPointList$rawRev= coRev
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$numPats = coNum
#run revenue prediction
curMod = NA
preds = NA
mydat = data.frame(rev=revUse, numPats = numUse, raw= coDataUse)
mydat = na.exclude(mydat)
if(nrow(mydat)>3){
if(length(mydat$raw)>length(mydat[mydat$raw==0,]$raw)){ #raw r&d not all 0
if(length(mydat$numPats)>length(mydat[mydat$raw==0,]$numPats)){ #raw r&d not all 0
curMod = lm(rev~numPats+raw, data = mydat)
preddat = data.frame(numPats = coNum[11:numYears], raw = coData[11:numYears])
preds = predict(curMod,preddat)
curPointList$revEst[11:numYears]= preds
}
}
}
}
}
}
}
pointList = data.frame(matrix(ncol = 7, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
revUse = coRev[1:10]
numUse = coNum[1:10]
curPointList = data.frame(matrix(ncol =7, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
curPointList$raw= coData
curPointList$rawRev= coRev
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$numPats = coNum
#run revenue prediction
curMod = NA
preds = NA
mydat = data.frame(rev=revUse, numPats = numUse, raw= coDataUse)
mydat = na.exclude(mydat)
if(nrow(mydat)>3){
countZeroRD = length(mydat[mydat$raw==0,]$raw)
countZeroPats = length(mydat[mydat$numPats==0,]$numPats)
if(countZeroRD < nrow(mydat) & countZeroPats < nrow(mydat)){ #inputs are not al zero
curMod = lm(rev~numPats+raw, data = mydat)
preddat = data.frame(numPats = coNum[11:numYears], raw = coData[11:numYears])
preds = predict(curMod,preddat)
curPointList$revEst[11:numYears]= preds
}
}
}
}
}
}
write.csv(pointList, "revenueout.csv")
pointList = data.frame(matrix(ncol = 7, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
revUse = coRev[1:10]
numUse = coNum[1:10]
curPointList = data.frame(matrix(ncol =7, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst")
curPointList$raw= coData
curPointList$rawRev= coRev
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$numPats = coNum
#run revenue prediction
curMod = NA
preds = NA
mydat = data.frame(rev=revUse, numPats = numUse, raw= coDataUse)
mydat = na.exclude(mydat)
if(nrow(mydat)>3){
countZeroRD = length(mydat[mydat$raw==0,]$raw)
countZeroPats = length(mydat[mydat$numPats==0,]$numPats)
if(countZeroRD < nrow(mydat) & countZeroPats < nrow(mydat)){ #inputs are not al zero
curMod = lm(rev~numPats+raw, data = mydat)
preddat = data.frame(numPats = coNum[11:numYears], raw = coData[11:numYears])
preds = predict(curMod,preddat)
curPointList$revEst[11:numYears]= preds
}
}
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
write.csv(pointList, "revenueout.csv")
length(levels(as.factor(pointList$companyName)))
successREV = pointList[!is.na(pointList$revEst),]
length(levels(as.factor(successREV$companyName)))
colnames(successREV)
MseRev = sum((successREV$revEst-successREV$rawRev)^2)
MseRev
successREV = pointList[!is.na(pointList$rawRev),]
MseRev = sum((successREV$revEst-successREV$rawRev)^2)
MseRev
successREV$revEst
successREV = pointList[!is.na(pointList$revEst),]
MseRev = sum((successREV$revEst-successREV$rawRev)^2)
MseRev
dim(pointList)
dim(successREV)
successREV$revEst
successREV$rawRev
successREV = pointList[!is.na(pointList$revEst),]
MseRev = sum((successREV$revEst-successREV$rawRev)^2)
MseRev
successREV = pointList[!is.na(pointList$revEst),]
successREV = successREV[!is.na(successREV$rawRev),]
MseRev = sum((successREV$revEst-successREV$rawRev)^2)
MseRev
successREV$seREV = (successREV$revEst-successREV$rawRev)^2
successREV$seREV = (successREV$revEst-successREV$rawRev)^2
errors_REV = data.frame(companyName = aggregate(successREV$seREV, list(gp=successREV$companyName), sum)$gp,
mseREV = aggregate(successREV$seREV, list(gp=successREV$companyName), mean)$x)
mean(errors_REV$mseREV)
sd(errors_REV$mseREV)
write.csv(RDDATA, "RDwithRevenue.csv")
colnames(pointList) =c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst", "revGrow")
for (i in 1:length(threeVarList)){ #industry loop
RDANDNUMREV = data.frame(gvkey = RDDATA$gvkey, npatappAdj = RDDATA$npatappAdj, xrdAdj = RDDATA$xrdAdj, datadate = RDDATA$datadate,sic = RDDATA$sic, datayear = RDDATA$datayear, rev = RDDATA$REV)
RDANDNUMREV = RDANDNUMREV[order(RDANDNUMREV$gvkey),]
RDANDNUMREV = RDANDNUMREV[!(is.na(RDANDNUMREV$xrdAdj)),]
#create input lists by industry
indList = levels(factor(RDANDNUM$sic))
dataList = list()
nameVector = c()
for (i in 1:length(indList)){
#curData = RDONLY[RDONLY$sic ==indList[i],]
curData = RDANDNUM[RDANDNUM$sic == indList[i],]
dataList[[length(dataList)+1]]= curData
nameVector[[length(nameVector)+1]]= indList[i]
#}
}
#create input lists by industry
indList = levels(factor(RDANDNUMREV$sic))
dataList = list()
nameVector = c()
for (i in 1:length(indList)){
#curData = RDONLY[RDONLY$sic ==indList[i],]
curData = RDANDNUMREV[RDANDNUMREV$sic == indList[i],]
dataList[[length(dataList)+1]]= curData
nameVector[[length(nameVector)+1]]= indList[i]
#}
}
#clean inputs for each industry
oneVarList = list()
twoVarList = list()
threeVarList = list()
numCosList = list()
startYearList = list()
for (i in 1:length(nameVector)){
curData = dataList[[i]]
curDataOneVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$xrdAdj)) #take R&D spending as a percentage of sales
names(res) = sprintf("%s",df$gvkey)
res
}
)
curDataTwoVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$npatappAdj))
names(res) = sprintf("%s",df$gvkey)
res
}
)
curDataThreeVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$rev))
names(res) = sprintf("%s",df$gvkey)
res
}
)
numCos = ncol(curDataOneVar)-1
model.data = curDataOneVar[-c(1)] #delete time entry
model.data2 =curDataTwoVar[-c(1)]
model.data3 =curDataThreeVar[-c(1)]
model.data = as.matrix(model.data)
model.data2 = as.matrix(model.data2)
model.data3 = as.matrix(model.data3)
model.data = t(model.data)
model.data2 = t(model.data2)
model.data3 = t(model.data3)
model.data2 = rbind(model.data, model.data2)
model.data3 = rbind(model.data2, model.data3)
oneVarList[[i]]= model.data
twoVarList[[i]]= model.data2
threeVarList[[i]]= model.data3
numCosList[[i]] = numCos
startYearList[[i]]= min(curDataOneVar$datayear)
}
#NOTES:======================================================================
#libraries and functions====================================================================
library(plyr)
library(ggplot2)
library(descr)
library(tseries)
library(gridExtra)
library(reshape2)
library(MARSS)
library(KFAS)
library(car)
library(mlogit)
library(nnet)
library(MASS)
library(forecast)
#library(lme4)
#create input lists by industry
indList = levels(factor(RDANDNUMREV$sic))
dataList = list()
nameVector = c()
for (i in 1:length(indList)){
#curData = RDONLY[RDONLY$sic ==indList[i],]
curData = RDANDNUMREV[RDANDNUMREV$sic == indList[i],]
dataList[[length(dataList)+1]]= curData
nameVector[[length(nameVector)+1]]= indList[i]
#}
}
#clean inputs for each industry
oneVarList = list()
twoVarList = list()
threeVarList = list()
numCosList = list()
startYearList = list()
for (i in 1:length(nameVector)){
curData = dataList[[i]]
curDataOneVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$xrdAdj)) #take R&D spending as a percentage of sales
names(res) = sprintf("%s",df$gvkey)
res
}
)
curDataTwoVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$npatappAdj))
names(res) = sprintf("%s",df$gvkey)
res
}
)
curDataThreeVar = ddply(curData, ~datayear,
function(df) {
res = data.frame(rbind(df$rev))
names(res) = sprintf("%s",df$gvkey)
res
}
)
numCos = ncol(curDataOneVar)-1
model.data = curDataOneVar[-c(1)] #delete time entry
model.data2 =curDataTwoVar[-c(1)]
model.data3 =curDataThreeVar[-c(1)]
model.data = as.matrix(model.data)
model.data2 = as.matrix(model.data2)
model.data3 = as.matrix(model.data3)
model.data = t(model.data)
model.data2 = t(model.data2)
model.data3 = t(model.data3)
model.data2 = rbind(model.data, model.data2)
model.data3 = rbind(model.data2, model.data3)
oneVarList[[i]]= model.data
twoVarList[[i]]= model.data2
threeVarList[[i]]= model.data3
numCosList[[i]] = numCos
startYearList[[i]]= min(curDataOneVar$datayear)
}
#revenue analysis--using only companies with 15 data points
pointList = data.frame(matrix(ncol = 8, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst", "revGrow")
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up inputdata
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
revGrow = coRev
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
coDataUse = coData[1:10] #use first 10 points for model
revUse = coRev[1:10]
numUse = coNum[1:10]
curPointList = data.frame(matrix(ncol =8, nrow = numYears))
colnames(curPointList) = c("industryName","companyName", "year", "raw","numPats","rawRev", "revEst", "revGrow")
curPointList$raw= coData
curPointList$rawRev= coRev
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$numPats = coNum
revGrowOut= rep(NA, length(revGrow))
for (k in 2:length(revGrow)){
revGrowOut[k]= revGrow[k]/revGrow[k-1]
}
curPointList$revGrow = revGrowOut
#run revenue prediction
curMod = NA
preds = NA
mydat = data.frame(rev=revUse, numPats = numUse, raw= coDataUse)
mydat = na.exclude(mydat)
if(nrow(mydat)>3){
countZeroRD = length(mydat[mydat$raw==0,]$raw)
countZeroPats = length(mydat[mydat$numPats==0,]$numPats)
if(countZeroRD < nrow(mydat) & countZeroPats < nrow(mydat)){ #inputs are not al zero
curMod = lm(rev~numPats+raw, data = mydat)
preddat = data.frame(numPats = coNum[11:numYears], raw = coData[11:numYears])
preds = predict(curMod,preddat)
curPointList$revEst[11:numYears]= preds
}
}
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
}
}
}
}
write.csv(pointList, "revenueout.csv")
colnames(pointList)
rev_byCo = data.frame(companyName = aggregate(pointList$numPats, list(gp=pointList$companyName), sum)$gp,
avgRev = aggregate(pointList$revGrow, list(gp=pointList$companyName), mean)$x,
avgRD = aggregate(pointList$raw, list = (gp=pointList$companyName), mean)$x)
rev_byCo = data.frame(companyName = aggregate(pointList$numPats, list(gp=pointList$companyName), sum)$gp,
avgRev = aggregate(pointList$revGrow, list(gp=pointList$companyName), mean)$x,
avgRD = aggregate(pointList$raw, list(gp=pointList$companyName), mean)$x)
rev_byCo
haveRev = pointList[!is.na(pointList$revGrow),]
colnames(pointList)
haveRev = pointList[!is.na(pointList$revGrow),]
rev_byCo = data.frame(companyName = aggregate(haveRev$numPats, list(gp=haveRev$companyName), sum)$gp,
avgRev = aggregate(haveRev$revGrow, list(gp=haveRev$companyName), mean)$x)
stats_byCo = data.frame(companyName = aggregate(pointList$numPats, list(gp=pointList$companyName), sum)$gp,
avgRD = aggregate(pointList$raw, list(gp=pointList$companyName), mean)$x,
avgNumPat = aggregate(pointList$numPats, list(gp=pointList$companyName), mean)$x)
dim(stats_byCo)
dim(rev_byCO)
dim(rev_byCo)
REVCHECK_dat = merge(x = rev_byCo, y = stats_byCo, by = "companyName", all.x = TRUE)
dim(REVCHECK_dat)
checkRev= lm(avgRev~avgRD+avgNumPat, data = REVCHECK_dat)
summary(checkRev)
colnames(pointList)
checkRev= lm(avgRev~avgRD+avgNumPat+factor(industryName), data = REVCHECK_dat)
REVCHECK_dat = merge(x = REVCHECK_dat, y = pointList, by = "companyName", all.x = TRUE)
colnames(REVCHECK_dat)
dim(REVCHECK_dat)
REVCHECK_dat = merge(x = rev_byCo, y = stats_byCo, by = "companyName", all.x = TRUE)
indNames = pointList[,c("companyName", "industryName")]
REVCHECK_dat = merge(x = REVCHECK_dat, y = indNames, by = "companyName", all.x = TRUE)
dim(REVCHECK_Dat)
dim(REVCHECK_dat)
head(REVCHECK_dat)
indNames = pointList[,c("companyName", "industryName")]
indNames = indNames[!duplicated(indNames[,c('companyName')]),]
dim(indNames)
REVCHECK_dat = merge(x = REVCHECK_dat, y = indNames, by = "companyName", all.x = TRUE)
dim(REVCHECK_dat)
REVCHECK_dat = merge(x = rev_byCo, y = stats_byCo, by = "companyName", all.x = TRUE)
indNames = pointList[,c("companyName", "industryName")]
indNames = indNames[!duplicated(indNames[,c('companyName')]),]
REVCHECK_dat = merge(x = REVCHECK_dat, y = indNames, by = "companyName", all.x = TRUE)
dim(REVCHECK_dat)
checkRev= lm(avgRev~avgRD+avgNumPat+factor(industryName), data = REVCHECK_dat)
summary(checkRev)
checkRev= lm(revGrow~raw+numPats+factor(industryName), data = haveRev)
summary(checkRev)
checkRev= lm(revGrow~raw+numPats, data = haveRev)
summary(checkRev)
