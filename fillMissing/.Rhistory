colnames(curPointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow", "stateEst", "stateSE")
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$rawRD= coData
curPointList$rawNumPats = coNum
curPointList$rawRev= coRev
revGrowOut= rep(NA, length(revGrow))
for (k in 2:length(revGrow)){
revGrowOut[k]= revGrow[k]/revGrow[k-1]
}
curPointList$revGrow = revGrowOut
#run state space model
#create state space model input data
stateIn = rbind(coData, coRev)
#run
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
#model.current = MARSS(stateIn, model = model.list, miss.value =NA, control = control.list)
model.current = test
#store output
if (is.null(model.current$num.params)){
print("failone")
numParams = NA
AICc = NA
curStates = NA
curSE = NA
curConv = NA
stateVect = rep(NA, numYears)
seVect = rep(NA, numYears)
} else{
numParams = model.current$num.params
AICc = model.current$AICc
stateVect = model.current$states[1,]
seVect = model.current$states.se[1,]
curStates = toString(model.current$states)
curSE = toString(model.current$states.se)
curConv = model.current$converge
curPointList$stateEst = model.current$states[1,]
curPointList$stateSE = model.current$states.se[1,]
}
if (is.null(model.current$logLik)){
logLik = NA
}else{
logLik = model.current$logLik
}
#store outputs
#general point-by-point output
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
#model success/diagnostic output
cur.outdata =data.frame(industry= industryName,company= companyName, logLik = logLik, numParams = numParams, AICc = AICc, states = curStates, ses = curSE, converge =curConv, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.ss)
output.data.ss= rbind(output.data.ss, cur.outdata)
}
}
}
}
write.csv(pointList, "revenueModelPoints.csv")
write.csv(output.data.ss, "revenueModelDiagnostics.csv")
dim(curPointList)
dim(model.current$states)
#state space setup
BAll = "identity"
UAll = "zero"
QAll= "diagonal and unequal" #note this could be changed if it causes problems since the unequal portion is irrelevant (it is a 1 by 1 matrix)
seq1 <- c(1,1)
ZAll = matrix(seq1, 2)
AAll = "equal" #company inputs are allowed to have trends
RAll = "diagonal and equal"
control.list = list(safe = TRUE, trace =1, allow.degen= TRUE, maxit = 1000,conv.test.slope.tol=0.1)
#output setup
pointList = data.frame(matrix(ncol = 9, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow", "stateEst", "stateSE")
output.data.ss = data.frame(matrix(ncol = 8, nrow = 0))
colnames(output.data.ss)= c("industryName", "companyName", "logLik", "numParams", "AICc", "States", "SEs", "converge")
#run state space model
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up input data
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
revGrow = coRev
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
curPointList = data.frame(matrix(ncol =9, nrow = numYears))
colnames(curPointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow", "stateEst", "stateSE")
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$rawRD= coData
curPointList$rawNumPats = coNum
curPointList$rawRev= coRev
revGrowOut= rep(NA, length(revGrow))
for (k in 2:length(revGrow)){
revGrowOut[k]= revGrow[k]/revGrow[k-1]
}
curPointList$revGrow = revGrowOut
#run state space model
#create state space model input data
stateIn = rbind(coData, coRev)
#run
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
model.current = MARSS(stateIn, model = model.list, miss.value =NA, control = control.list)
#model.current = test
#store output
if (is.null(model.current$num.params)){
print("failone")
numParams = NA
AICc = NA
curStates = NA
curSE = NA
curConv = NA
stateVect = rep(NA, numYears)
seVect = rep(NA, numYears)
} else{
numParams = model.current$num.params
AICc = model.current$AICc
stateVect = model.current$states[1,]
seVect = model.current$states.se[1,]
curStates = toString(model.current$states)
curSE = toString(model.current$states.se)
curConv = model.current$converge
curPointList$stateEst = model.current$states[1,]
curPointList$stateSE = model.current$states.se[1,]
}
if (is.null(model.current$logLik)){
logLik = NA
}else{
logLik = model.current$logLik
}
#store outputs
#general point-by-point output
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
#model success/diagnostic output
cur.outdata =data.frame(industry= industryName,company= companyName, logLik = logLik, numParams = numParams, AICc = AICc, states = curStates, ses = curSE, converge =curConv, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.ss)
output.data.ss= rbind(output.data.ss, cur.outdata)
}
}
}
}
write.csv(pointList, "revenueModelPoints.csv")
write.csv(output.data.ss, "revenueModelDiagnostics.csv")
numCos = length(output.data.ss$companyName)
diagnostics = read.csv("revenueModelDiagnostics.csv")
numCos = length(diagnostics$companyName)
numCos
successCos = length(diagnostics[diagnostics$converge == 0,]$companyName)
successCos
1578-1488
colnames(points)
points = read.csv("revenueModelPoints.csv")
points = read.csv("revenueModelPoints.csv")
colnames(points)
regModel= lm(revGrow= stateEst + stateSE, data = points)
regModel= lm(revGrow~stateEst + stateSE, data = points)
summary(regModel)
successNames = levels(as.factor(diagnostics[diagnostics$converge == 0,]$companyName))
length(successNames)
successPoints = points[points$companyName %in% successNames,]
dim(successPoints)
successPoints = na.exclude(successPoints)
dim(successPoints)
regModel= lm(revGrow~stateEst + stateSE, data = successPoints)
summary(regModel)
regModel= lm(revGrow~stateEst + stateSE+ factor(companyName), data = successPoints)
summary(regModel)
summary(regModel)
regModel$coefficients
regModel$coefficients[1:10]
regModel$p.values[1:10]
regModel$p.value[1:10]
str(regModel)
summary(regModel)$coefficients
summary(regModel)$coefficients[1:10,]
regModel= lm(revGrow~stateEst + stateSE, data = successPoints)
summary(regModel)
regModel= lm(revGrow~stateEst + stateSE+ factor(companyName), data = successPoints)
summary(regModel)
aggPoints = data.frame(companyName = aggregate(successPoints$stateEst, list(gp=successPoints$companyName), mean)$gp,
aggState = aggregate(successPoints$stateEst, list(gp=successPoints$companyName), mean)$x,
aggSE = aggregate(successPoints$stateSE, list(gp=successPoints$companyName), mean)$x)
aggPoints
aggPoints = data.frame(companyName = aggregate(successPoints$stateEst, list(gp=successPoints$companyName), mean)$gp,
aggState = aggregate(successPoints$stateEst, list(gp=successPoints$companyName), mean)$x,
aggSE = aggregate(successPoints$stateSE, list(gp=successPoints$companyName), mean)$x,
aggRev = aggregate(successPoints$revGrow, list(gp=successPoints$companyName), mean)$x)
aggModel= lm(aggRev~aggState + aggSE, data = aggPoints)
summary(aggModel)
colnames(successPoints)
aggPoints = data.frame(companyName = aggregate(successPoints$stateEst, list(gp=successPoints$companyName), mean)$gp,
aggState = aggregate(successPoints$stateEst, list(gp=successPoints$companyName), mean)$x,
aggSE = aggregate(successPoints$stateSE, list(gp=successPoints$companyName), mean)$x,
aggRev = aggregate(successPoints$revGrow, list(gp=successPoints$companyName), mean)$x,
aggRawRD = aggregate(successPoints$rawRD, list(gp=successPoints$companyName), mean)$x)
aggModel= lm(aggRev~aggRawRD, data = aggPoints)
summary(aggModel)
model.current
stateIn
i = 1
j = 3
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
#NOTES:======================================================================
#libraries and functions====================================================================
library(plyr)
library(ggplot2)
library(descr)
library(tseries)
library(gridExtra)
library(reshape2)
library(MARSS)
library(KFAS)
library(car)
library(mlogit)
library(nnet)
library(MASS)
library(forecast)
#library(lme4)
coData = na.trim(coData)
numYears = length(coData)
revGrow = coRev
curPointList = data.frame(matrix(ncol =10, nrow = numYears))
colnames(curPointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow","revGrowFive" "stateEst", "stateSE")
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$rawRD= coData
curPointList$rawNumPats = coNum
colnames(curPointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow","revGrowFive", "stateEst", "stateSE")
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$rawRD= coData
curPointList$rawNumPats = coNum
curPointList$rawRev= coRev
revGrowOut= rep(NA, length(revGrow))
revGrowFive = rep(NA, length(revGrow))
for (k in 2:length(revGrow)){
revGrowOut[k]= revGrow[k]/revGrow[k-1]
}
for (k in 2:(length(revGrow)-4)){
revGrowFive[k]=mean(revGrowOut[k:k+4])
}
curPointList$revGrow = revGrowOut
curPointList$revGrowFive = revGrowFive
stateIn = rbind(coData, coRev)
#run
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
BAll = "identity"
UAll = "zero"
QAll= "diagonal and unequal" #note this could be changed if it causes problems since the unequal portion is irrelevant (it is a 1 by 1 matrix)
seq1 <- c(1,1)
ZAll = matrix(seq1, 2)
AAll = "equal" #company inputs are allowed to have trends
RAll = "diagonal and equal"
control.list = list(safe = TRUE, trace =1, allow.degen= TRUE, maxit = 1000,conv.test.slope.tol=0.1)
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
model.current = MARSS(stateIn, model = model.list, miss.value =NA, control = control.list)
test  = MARSS(stateIn, model = model.list, miss.value =NA, control = control.list)
#run models===========================================================================
#state space setup
BAll = "identity"
UAll = "zero"
QAll= "diagonal and unequal" #note this could be changed if it causes problems since the unequal portion is irrelevant (it is a 1 by 1 matrix)
seq1 <- c(1,1)
ZAll = matrix(seq1, 2)
AAll = "equal" #company inputs are allowed to have trends
RAll = "diagonal and equal"
control.list = list(safe = TRUE, trace =1, allow.degen= TRUE, maxit = 1000,conv.test.slope.tol=0.1)
#output setup
pointList = data.frame(matrix(ncol = 10, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow", "revGrowFive", "stateEst", "stateSE")
output.data.ss = data.frame(matrix(ncol = 8, nrow = 0))
colnames(output.data.ss)= c("industryName", "companyName", "logLik", "numParams", "AICc", "States", "SEs", "converge")
#run state space model
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up input data
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
revGrow = coRev
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
curPointList = data.frame(matrix(ncol =10, nrow = numYears))
colnames(curPointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow","revGrowFive", "stateEst", "stateSE")
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$rawRD= coData
curPointList$rawNumPats = coNum
curPointList$rawRev= coRev
revGrowOut= rep(NA, length(revGrow))
revGrowFive = rep(NA, length(revGrow))
for (k in 2:length(revGrow)){
revGrowOut[k]= revGrow[k]/revGrow[k-1]
}
for (k in 2:(length(revGrow)-4)){
revGrowFive[k]=mean(revGrowOut[k:k+4])
}
curPointList$revGrow = revGrowOut
curPointList$revGrowFive = revGrowFive
#run state space model
#create state space model input data
stateIn = rbind(coData, coRev)
#run
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
#model.current = MARSS(stateIn, model = model.list, miss.value =NA, control = control.list)
model.current = test
#store output
if (is.null(model.current$num.params)){
print("failone")
numParams = NA
AICc = NA
curStates = NA
curSE = NA
curConv = NA
stateVect = rep(NA, numYears)
seVect = rep(NA, numYears)
} else{
numParams = model.current$num.params
AICc = model.current$AICc
stateVect = model.current$states[1,]
seVect = model.current$states.se[1,]
curStates = toString(model.current$states)
curSE = toString(model.current$states.se)
curConv = model.current$converge
curPointList$stateEst = model.current$states[1,]
curPointList$stateSE = model.current$states.se[1,]
}
if (is.null(model.current$logLik)){
logLik = NA
}else{
logLik = model.current$logLik
}
#store outputs
#general point-by-point output
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
#model success/diagnostic output
cur.outdata =data.frame(industry= industryName,company= companyName, logLik = logLik, numParams = numParams, AICc = AICc, states = curStates, ses = curSE, converge =curConv, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.ss)
output.data.ss= rbind(output.data.ss, cur.outdata)
}
}
}
}
#state space setup
BAll = "identity"
UAll = "zero"
QAll= "diagonal and unequal" #note this could be changed if it causes problems since the unequal portion is irrelevant (it is a 1 by 1 matrix)
seq1 <- c(1,1)
ZAll = matrix(seq1, 2)
AAll = "equal" #company inputs are allowed to have trends
RAll = "diagonal and equal"
control.list = list(safe = TRUE, trace =1, allow.degen= TRUE, maxit = 1000,conv.test.slope.tol=0.1)
#output setup
pointList = data.frame(matrix(ncol = 10, nrow = 0))
colnames(pointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow", "revGrowFive", "stateEst", "stateSE")
output.data.ss = data.frame(matrix(ncol = 8, nrow = 0))
colnames(output.data.ss)= c("industryName", "companyName", "logLik", "numParams", "AICc", "States", "SEs", "converge")
#run state space model
for (i in 1:length(threeVarList)){ #industry loop
curData = threeVarList[[i]]
industryName = nameVector[i]
companyNameVector = rownames(curData)
for (j in 1:(nrow(curData)/3)){#for each company, run model
#set up input data
companyName = companyNameVector[j]
coData = curData[j,]
coNum = curData[j+nrow(curData)/3,]
coRev = curData[j+(nrow(curData)/3)*2,]
if (length(coData[is.na(coData)])<length(coData)){ #we have some non-NA entries
nonNA1 = which(!is.na(coData))
startIndex1 = min(nonNA1)
endIndex1 = max(nonNA1)
startYear = startYearList[[i]][1]-startIndex1 + 1
coNum = coNum[startIndex1:endIndex1]
coRev= coRev[startIndex1:endIndex1]
coData = na.trim(coData)
numYears = length(coData)
revGrow = coRev
if (numYears > 14 & length(coData)== length(na.exclude(coData))){ #we must have 15 non-NA points
curPointList = data.frame(matrix(ncol =10, nrow = numYears))
colnames(curPointList) =c("industryName","companyName", "year", "rawRD","rawNumPats","rawRev","revGrow","revGrowFive", "stateEst", "stateSE")
curPointList$industryName = industryName
curPointList$companyName = companyName
curPointList$year = c(startYear:(startYear+numYears-1))
curPointList$rawRD= coData
curPointList$rawNumPats = coNum
curPointList$rawRev= coRev
revGrowOut= rep(NA, length(revGrow))
revGrowFive = rep(NA, length(revGrow))
for (k in 2:length(revGrow)){
revGrowOut[k]= revGrow[k]/revGrow[k-1]
}
for (k in 2:(length(revGrow)-4)){
revGrowFive[k]=mean(revGrowOut[k:k+4])
}
curPointList$revGrow = revGrowOut
curPointList$revGrowFive = revGrowFive
#run state space model
#create state space model input data
stateIn = rbind(coData, coRev)
#run
model.list = list(B=BAll, U=UAll, Q=QAll, A=AAll, R=RAll,  Z=ZAll)
#model.current = MARSS(stateIn, model = model.list, miss.value =NA, control = control.list)
model.current = test
#store output
if (is.null(model.current$num.params)){
print("failone")
numParams = NA
AICc = NA
curStates = NA
curSE = NA
curConv = NA
stateVect = rep(NA, numYears)
seVect = rep(NA, numYears)
} else{
numParams = model.current$num.params
AICc = model.current$AICc
stateVect = model.current$states[1,]
seVect = model.current$states.se[1,]
curStates = toString(model.current$states)
curSE = toString(model.current$states.se)
curConv = model.current$converge
#curPointList$stateEst = model.current$states[1,]
#curPointList$stateSE = model.current$states.se[1,]
}
if (is.null(model.current$logLik)){
logLik = NA
}else{
logLik = model.current$logLik
}
#store outputs
#general point-by-point output
colnames(curPointList)= colnames(pointList)
pointList = rbind(pointList, curPointList)
#model success/diagnostic output
cur.outdata =data.frame(industry= industryName,company= companyName, logLik = logLik, numParams = numParams, AICc = AICc, states = curStates, ses = curSE, converge =curConv, stringsAsFactors = FALSE)
colnames(cur.outdata)= colnames(output.data.ss)
output.data.ss= rbind(output.data.ss, cur.outdata)
}
}
}
}
write.csv(pointList, "revenueModelPoints2.csv")
diagnostics = read.csv("revenueModelDiagnostics.csv")
points = read.csv("revenueModelPoints.csv")
successPoints = points[points$companyName %in% successNames,]
successPoints = na.exclude(successPoints)
colnames(succeessPoints)
colnames(successPoints)
points = read.csv("revenueModelPoints.csv")
successPoints = points[points$companyName %in% successNames,]
successPoints = successPoints[c("industryName", "companyName","year", "rawRD", "rawNumPats", "rawRev", "revGrow", "stateEst", "stateSE"),]
dim(successPoints)
head(successPoints)
points = read.csv("revenueModelPoints.csv")
successPoints = points[points$companyName %in% successNames,]
successPoints = successPoints[,c("industryName", "companyName","year", "rawRD", "rawNumPats", "rawRev", "revGrow", "stateEst", "stateSE")]
dim(successPoints)
successPoints = na.exclude(successPoints)
regModel= lm(revGrow~stateEst + stateSE, data = successPoints)
summary(regModel)
regModel= lm(revGrow~stateEst + stateSE+ factor(companyName), data = successPoints)
summary(regModel)
points = read.csv("revenueModelPoints.csv")
successPoints = points[points$companyName %in% successNames,]
successPoints = na.exclude(successPoints)
regModel= lm(revGrowFive~stateEst + stateSE, data = successPoints)
summary(regModel)
